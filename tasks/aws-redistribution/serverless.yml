service: redistribution

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-central-1
  memorySize: 128
  timeout: 30
  versionFunctions: false
  environment:
    AWS_DYNAMODB_TABLE_NAME: redistribution
    AWS_DISTRIBUTE_QUEUE_ARN: ${ssm:distribute-queue-arn}
    AWS_DISTRIBUTE_QUEUE_URL: ${ssm:distribute-queue-url}
    DB_NAME: ${ssm:db-name}
    DB_USERNAME: ${ssm:db-username}
    DB_PASSWORD: ${ssm:db-password}
    DB_PORT: ${ssm:db-port}
    DB_HOST: ${ssm:db-host}
    DYNAMODB_STREAM_ARN: ${ssm:dynamodb-stream-arn}

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:BatchWriteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/${self:provider.environment.AWS_DYNAMODB_TABLE_NAME}
        - Effect: Allow
          Action:
            - ec2:DescribeNetworkInterfaces
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeInstances
            - ec2:AttachNetworkInterface
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - ${self:provider.environment.AWS_DISTRIBUTE_QUEUE_ARN}

plugins:
  - serverless-plugin-typescript

functions:
  distribute:
    handler: src/handlers/distribute.handler
    events:
      - http:
          method: POST
          path: /distribution
          request:
            schemas:
              application/json: ${file(schemas/user.json)}

  shopCreate:
    handler: src/handlers/shop-create.handler
    events:
      - http:
          method: POST
          path: /shopCreate

  saveUser:
    handler: src/listeners/save-user.handler
    timeout: 30
    events:
      - sqs:
          arn: ${self:provider.environment.AWS_DISTRIBUTE_QUEUE_ARN}
          maximumBatchingWindow: 10
          batchSize: 1000
          enabled: true
  count:
    handler: src/listeners/count.handler
    events:
      - stream:
          arn: ${self:provider.environment.DYNAMODB_STREAM_ARN}
          filterPatterns:
            - eventName: [INSERT]
              dynamodb:
                Keys:
                  hashKey:
                    S:
                      - prefix: 'u:'
              
